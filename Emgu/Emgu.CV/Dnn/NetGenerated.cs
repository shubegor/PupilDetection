//----------------------------------------------------------------------------
//  This file is automatically generated, do not modify.      
//----------------------------------------------------------------------------

#if !(NETFX_CORE || NETCOREAPP1_1 || NETSTANDARD1_4)

using System;
using System.Runtime.InteropServices;
using Emgu.CV;
using Emgu.CV.Structure;
using Emgu.Util;

namespace Emgu.CV.Dnn
{
   public static partial class DnnInvoke
   {

     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetSetPreferableBackend(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetSetPreferableTarget(
        IntPtr obj,  
        int val);
     
     [DllImport(CvInvoke.ExternLibrary, CallingConvention = CvInvoke.CvCallingConvention)]
     internal static extern void cveNetEnableFusion(
        IntPtr obj, 
        [MarshalAs(CvInvoke.BoolMarshalType)] 
        bool val);
     
   }

   public partial class Net
   {

     /// <summary>
     /// Ask network to use specific computation backend where it supported.
     /// </summary>
     public void SetPreferableBackend(int value)
     {
        DnnInvoke.cveNetSetPreferableBackend(_ptr, value); 
     }
     
     /// <summary>
     /// Ask network to make computations on specific target device.
     /// </summary>
     public void SetPreferableTarget(int value)
     {
        DnnInvoke.cveNetSetPreferableTarget(_ptr, value); 
     }
     
     /// <summary>
     /// Enables or disables layer fusion in the network.
     /// </summary>
     public void EnableFusion(bool value)
     {
        DnnInvoke.cveNetEnableFusion(_ptr, value); 
     }
     
   }
}
#endif